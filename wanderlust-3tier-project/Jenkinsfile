pipeline {
    agent { label 'agent' }

    tools {
        nodejs 'NodeJS24'
    }

    parameters {
        booleanParam(name: 'SKIP_DEPLOY', defaultValue: false, description: 'Skip deployment stage')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip test stages')
    }

    environment {
        IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKER_USER = "devopswithjunaid"
        BACKEND_IMAGE = "${DOCKER_USER}/wanderlust-backend"
        FRONTEND_IMAGE = "${DOCKER_USER}/wanderlust-frontend"
        TRIVY_CACHE_DIR = "${WORKSPACE}/.trivy-cache"
        DEPLOY_SUCCESS = "false"
        DOCKER_PUSH_SUCCESS = "false"
        BUILD_SUCCESS = "false"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
                echo "üßπ Workspace cleaned"
            }
        }

        stage('SCM Checkout') {
            steps {
                script {
                    try {
                        git branch: 'main', url: 'https://github.com/devopswithjunaid/devops-projects01.git'
                        echo "‚úÖ Code checkout successful"
                    } catch (Exception e) {
                        error "‚ùå Git checkout failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    try {
                        dir('wanderlust-3tier-project/backend') {
                            sh '''
                                echo "üì¶ Installing backend dependencies..."
                                npm ci --only=production
                                echo "‚úÖ Backend dependencies installed"
                            '''
                        }
                        dir('wanderlust-3tier-project/frontend') {
                            sh '''
                                echo "üì¶ Installing frontend dependencies..."
                                npm ci --only=production
                                echo "‚úÖ Frontend dependencies installed"
                            '''
                        }
                    } catch (Exception e) {
                        error "‚ùå Dependency installation failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Code Quality Check') {
            when {
                expression { !params.SKIP_TESTS }
            }
            steps {
                script {
                    try {
                        echo "üìä Running code quality checks..."
                        dir('wanderlust-3tier-project/backend') {
                            sh '''
                                echo "Backend security audit:"
                                npm audit --audit-level moderate || echo "‚ö†Ô∏è Audit completed with warnings"
                            '''
                        }
                        dir('wanderlust-3tier-project/frontend') {
                            sh '''
                                echo "Frontend security audit:"
                                npm audit --audit-level moderate || echo "‚ö†Ô∏è Audit completed with warnings"
                            '''
                        }
                        echo "‚úÖ Code quality checks completed"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Code quality check warnings: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    try {
                        dir('wanderlust-3tier-project') {
                            echo "üê≥ Building Docker images..."
                            
                            // Build backend image
                            sh """
                                echo "Building backend image..."
                                docker build -t ${BACKEND_IMAGE}:${IMAGE_TAG} -f ./backend/Dockerfile_optimized ./backend
                                docker tag ${BACKEND_IMAGE}:${IMAGE_TAG} ${BACKEND_IMAGE}:latest
                                echo "‚úÖ Backend image built successfully"
                            """
                            
                            // Build frontend image
                            sh """
                                echo "Building frontend image..."
                                docker build -t ${FRONTEND_IMAGE}:${IMAGE_TAG} -f ./frontend/Dockerfile_optimized ./frontend
                                docker tag ${FRONTEND_IMAGE}:${IMAGE_TAG} ${FRONTEND_IMAGE}:latest
                                echo "‚úÖ Frontend image built successfully"
                            """
                            
                            // List built images
                            sh "docker images | grep ${DOCKER_USER}/wanderlust"
                            env.BUILD_SUCCESS = "true"
                        }
                    } catch (Exception e) {
                        error "‚ùå Docker build failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Security Scan') {
            when {
                expression { !params.SKIP_TESTS }
            }
            steps {
                script {
                    try {
                        sh "mkdir -p ${TRIVY_CACHE_DIR}"
                        echo "üîç Scanning Docker images for vulnerabilities..."
                        
                        sh """
                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                            -v ${TRIVY_CACHE_DIR}:/root/.cache/ \
                            aquasec/trivy image --scanners vuln --severity HIGH,CRITICAL \
                            --exit-code 0 --format table ${BACKEND_IMAGE}:${IMAGE_TAG} || echo "‚ö†Ô∏è Backend scan completed with findings"
                        """
                        
                        sh """
                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                            -v ${TRIVY_CACHE_DIR}:/root/.cache/ \
                            aquasec/trivy image --scanners vuln --severity HIGH,CRITICAL \
                            --exit-code 0 --format table ${FRONTEND_IMAGE}:${IMAGE_TAG} || echo "‚ö†Ô∏è Frontend scan completed with findings"
                        """
                        
                        echo "‚úÖ Security scans completed"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Security scan warnings: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    try {
                        echo "üö¢ Pushing images to Docker Hub..."
                        withCredentials([string(credentialsId: 'docker-hub-token', variable: 'DOCKER_TOKEN')]) {
                            sh '''
                                echo $DOCKER_TOKEN | docker login -u devopswithjunaid --password-stdin
                                
                                echo "Pushing backend images..."
                                docker push ${BACKEND_IMAGE}:${IMAGE_TAG}
                                docker push ${BACKEND_IMAGE}:latest
                                
                                echo "Pushing frontend images..."
                                docker push ${FRONTEND_IMAGE}:${IMAGE_TAG}
                                docker push ${FRONTEND_IMAGE}:latest
                                
                                echo "‚úÖ All images pushed successfully"
                            '''
                        }
                        env.DOCKER_PUSH_SUCCESS = "true"
                    } catch (Exception e) {
                        error "‚ùå Docker push failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Deploy Application') {
            when {
                expression { !params.SKIP_DEPLOY }
            }
            steps {
                script {
                    try {
                        echo "üöÄ Deploying application..."
                        withCredentials([sshUserPrivateKey(credentialsId: 'agent-key', 
                                                         keyFileVariable: 'SSH_KEY', 
                                                         usernameVariable: 'SSH_USER')]) {
                            sh '''
                                ssh -i $SSH_KEY -o StrictHostKeyChecking=no $SSH_USER@20.55.29.56 "
                                    cd /home/azureuser/devops-projects/wanderlust-3tier-project &&
                                    echo 'Pulling latest images...' &&
                                    docker compose pull &&
                                    echo 'Starting services...' &&
                                    docker compose up -d &&
                                    echo 'Checking service status...' &&
                                    docker compose ps &&
                                    echo '‚úÖ Deployment completed successfully'
                                "
                            '''
                        }
                        env.DEPLOY_SUCCESS = "true"
                    } catch (Exception e) {
                        error "‚ùå Deployment failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Health Check') {
            when {
                expression { !params.SKIP_DEPLOY }
            }
            steps {
                script {
                    try {
                        echo "üè• Performing health check..."
                        sleep(time: 30, unit: 'SECONDS')
                        
                        withCredentials([sshUserPrivateKey(credentialsId: 'agent-key', 
                                                         keyFileVariable: 'SSH_KEY', 
                                                         usernameVariable: 'SSH_USER')]) {
                            sh '''
                                ssh -i $SSH_KEY -o StrictHostKeyChecking=no $SSH_USER@20.55.29.56 "
                                    echo 'Checking application health...' &&
                                    curl -f http://localhost:3000/health || echo 'Health check endpoint not available' &&
                                    docker compose logs --tail=10
                                "
                            '''
                        }
                        echo "‚úÖ Health check completed"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Health check warnings: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Cleanup Local Images') {
            steps {
                script {
                    try {
                        echo "üßπ Cleaning up local Docker images..."
                        sh '''
                            # Remove old images (keep last 3 builds)
                            docker images ${BACKEND_IMAGE} --format "table {{.Repository}}:{{.Tag}}" | grep -v latest | tail -n +4 | xargs -r docker rmi || true
                            docker images ${FRONTEND_IMAGE} --format "table {{.Repository}}:{{.Tag}}" | grep -v latest | tail -n +4 | xargs -r docker rmi || true
                            
                            # Clean up dangling images
                            docker image prune -f || true
                            
                            echo "‚úÖ Cleanup completed"
                        '''
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Cleanup warnings: ${e.getMessage()}"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "=== üìã PIPELINE SUMMARY ==="
                echo "üèóÔ∏è  Build Number: ${BUILD_NUMBER}"
                echo "üåø Branch: main"
                echo "üì¶ Image Tag: ${IMAGE_TAG}"
                
                if (env.BUILD_SUCCESS == "true") {
                    echo "üê≥ Docker Build: ‚úÖ SUCCESS"
                } else {
                    echo "üê≥ Docker Build: ‚ùå FAILED"
                }
                
                if (env.DOCKER_PUSH_SUCCESS == "true") {
                    echo "üì§ Docker Push: ‚úÖ SUCCESS"
                } else {
                    echo "üì§ Docker Push: ‚ùå FAILED"
                }
                
                if (env.DEPLOY_SUCCESS == "true") {
                    echo "üöÄ Deployment: ‚úÖ SUCCESS"
                } else if (params.SKIP_DEPLOY) {
                    echo "üöÄ Deployment: ‚è≠Ô∏è SKIPPED"
                } else {
                    echo "üöÄ Deployment: ‚ùå FAILED"
                }
                
                echo "=== üîó USEFUL LINKS ==="
                echo "üìä Jenkins Build: ${BUILD_URL}"
                echo "üê≥ Backend Image: ${BACKEND_IMAGE}:${IMAGE_TAG}"
                echo "üê≥ Frontend Image: ${FRONTEND_IMAGE}:${IMAGE_TAG}"
            }
        }
        
        success {
            echo "üéâ Pipeline completed successfully!"
        }
        
        failure {
            echo "üí• Pipeline failed! Check the logs above for details."
        }
        
        cleanup {
            // Clean workspace on completion
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true)
        }
    }
}
