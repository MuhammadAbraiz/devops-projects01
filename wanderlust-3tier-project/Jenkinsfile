pipeline {
    agent { label 'agent' }

    tools {
        nodejs 'NodeJS24'
    }

    parameters {
        booleanParam(name: 'SKIP_DEPLOY', defaultValue: false, description: 'Skip deployment stage')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip test stages')
    }

    environment {
        IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKER_USER = "devopswithjunaid"
        BACKEND_IMAGE = "${DOCKER_USER}/wanderlust-backend"
        FRONTEND_IMAGE = "${DOCKER_USER}/wanderlust-frontend"
        BUILD_SUCCESS = "false"
        DOCKER_PUSH_SUCCESS = "false"
        DEPLOY_SUCCESS = "false"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                script {
                    try {
                        echo "üßπ Starting fresh workspace"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Cleanup warning: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('SCM Checkout') {
            steps {
                script {
                    try {
                        git branch: 'main', url: 'https://github.com/MuhammadAbraiz/devops-projects01.git'
                        echo "‚úÖ Code checkout successful"
                    } catch (Exception e) {
                        error "‚ùå Git checkout failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    try {
                        dir('wanderlust-3tier-project/backend') {
                            sh '''
                                echo "üì¶ Installing backend dependencies..."
                                npm ci --only=production
                                echo "‚úÖ Backend dependencies installed"
                            '''
                        }
                        dir('wanderlust-3tier-project/frontend') {
                            sh '''
                                echo "üì¶ Installing frontend dependencies..."
                                npm ci --only=production
                                echo "‚úÖ Frontend dependencies installed"
                            '''
                        }
                    } catch (Exception e) {
                        error "‚ùå Dependency installation failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Code Quality Check') {
            when {
                expression { !params.SKIP_TESTS }
            }
            steps {
                script {
                    try {
                        echo "üìä Running code quality checks..."
                        dir('wanderlust-3tier-project/backend') {
                            sh '''
                                echo "Backend security audit:"
                                npm audit --audit-level moderate || echo "‚ö†Ô∏è Audit completed with warnings"
                            '''
                        }
                        dir('wanderlust-3tier-project/frontend') {
                            sh '''
                                echo "Frontend security audit:"
                                npm audit --audit-level moderate || echo "‚ö†Ô∏è Audit completed with warnings"
                            '''
                        }
                        echo "‚úÖ Code quality checks completed"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Code quality check warnings: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    try {
                        dir('wanderlust-3tier-project') {
                            echo "üê≥ Building Docker images..."
                            
                            // Build backend image
                            sh """
                                echo "Building backend image..."
                                docker build -t ${BACKEND_IMAGE}:${IMAGE_TAG} -f ./backend/Dockerfile_optimized ./backend
                                docker tag ${BACKEND_IMAGE}:${IMAGE_TAG} ${BACKEND_IMAGE}:latest
                                echo "‚úÖ Backend image built successfully"
                            """
                            
                            // Build frontend image
                            sh """
                                echo "Building frontend image..."
                                docker build -t ${FRONTEND_IMAGE}:${IMAGE_TAG} -f ./frontend/Dockerfile_optimized ./frontend
                                docker tag ${FRONTEND_IMAGE}:${IMAGE_TAG} ${FRONTEND_IMAGE}:latest
                                echo "‚úÖ Frontend image built successfully"
                            """
                            
                            // List built images
                            sh "docker images | grep ${DOCKER_USER}/wanderlust"
                            env.BUILD_SUCCESS = "true"
                        }
                    } catch (Exception e) {
                        error "‚ùå Docker build failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    try {
                        echo "üö¢ Pushing images to Docker Hub..."
                        withCredentials([string(credentialsId: 'docker-hub-token', variable: 'DOCKER_TOKEN')]) {
                            sh '''
                                echo $DOCKER_TOKEN | docker login -u devopswithjunaid --password-stdin
                                
                                echo "Pushing backend images..."
                                docker push ${BACKEND_IMAGE}:${IMAGE_TAG}
                                docker push ${BACKEND_IMAGE}:latest
                                
                                echo "Pushing frontend images..."
                                docker push ${FRONTEND_IMAGE}:${IMAGE_TAG}
                                docker push ${FRONTEND_IMAGE}:latest
                                
                                echo "‚úÖ All images pushed successfully"
                            '''
                        }
                        env.DOCKER_PUSH_SUCCESS = "true"
                    } catch (Exception e) {
                        error "‚ùå Docker push failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Deploy Application') {
            when {
                expression { !params.SKIP_DEPLOY }
            }
            steps {
                script {
                    try {
                        echo "üöÄ Deploying application to local EC2 instance..."
                        
                        // Deploy using docker run commands directly on the host
                        sh '''
                            echo "üì• Pulling latest images..."
                            docker pull ${BACKEND_IMAGE}:latest
                            docker pull ${FRONTEND_IMAGE}:latest
                            
                            echo "üõë Stopping existing containers..."
                            docker stop wanderlust-mongodb wanderlust-redis wanderlust-backend wanderlust-frontend || true
                            docker rm wanderlust-mongodb wanderlust-redis wanderlust-backend wanderlust-frontend || true
                            
                            echo "üóÑÔ∏è Starting MongoDB..."
                            docker run -d --name wanderlust-mongodb \\
                                -e MONGO_INITDB_ROOT_USERNAME=admin \\
                                -e MONGO_INITDB_ROOT_PASSWORD=password123 \\
                                -e MONGO_INITDB_DATABASE=wanderlust \\
                                -p 27017:27017 \\
                                --restart unless-stopped \\
                                mongo:7.0
                            
                            echo "üî¥ Starting Redis..."
                            docker run -d --name wanderlust-redis \\
                                -p 6379:6379 \\
                                --restart unless-stopped \\
                                redis:7.2-alpine
                            
                            echo "‚è≥ Waiting for databases to start..."
                            sleep 15
                            
                            echo "üîß Starting Backend..."
                            docker run -d --name wanderlust-backend \\
                                -e NODE_ENV=production \\
                                -e PORT=5000 \\
                                -e MONGODB_URI="mongodb://admin:password123@$(hostname -I | awk '{print $1}'):27017/wanderlust?authSource=admin" \\
                                -e REDIS_URL="redis://$(hostname -I | awk '{print $1}'):6379" \\
                                -e JWT_SECRET=your-super-secret-jwt-key-change-in-production \\
                                -e CORS_ORIGIN="http://$(hostname -I | awk '{print $1}'):3000" \\
                                -p 5000:5000 \\
                                --restart unless-stopped \\
                                ${BACKEND_IMAGE}:latest
                            
                            echo "‚è≥ Waiting for backend to start..."
                            sleep 10
                            
                            echo "üé® Starting Frontend..."
                            docker run -d --name wanderlust-frontend \\
                                -e NODE_ENV=production \\
                                -e VITE_API_URL="http://$(hostname -I | awk '{print $1}'):5000" \\
                                -p 3000:3000 \\
                                --restart unless-stopped \\
                                ${FRONTEND_IMAGE}:latest
                            
                            echo "‚è≥ Waiting for frontend to start..."
                            sleep 10
                            
                            echo "üìä Checking container status..."
                            docker ps --filter "name=wanderlust" --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"
                            
                            echo "‚úÖ Deployment completed successfully"
                        '''
                        
                        env.DEPLOY_SUCCESS = "true"
                    } catch (Exception e) {
                        error "‚ùå Deployment failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Health Check') {
            when {
                expression { !params.SKIP_DEPLOY }
            }
            steps {
                script {
                    try {
                        echo "üè• Performing health check..."
                        
                        sh '''
                            echo "üîç Checking application health..."
                            
                            # Wait a bit more for services to fully start
                            sleep 15
                            
                            # Check if containers are running
                            echo "Container status:"
                            docker ps --filter "name=wanderlust" --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"
                            
                            # Get the host IP
                            HOST_IP=$(hostname -I | awk '{print $1}')
                            
                            # Check backend health (may fail initially, that's ok)
                            echo "\\nüîç Testing backend health..."
                            curl -f http://$HOST_IP:5000/health || echo "‚ö†Ô∏è Backend health endpoint not ready yet"
                            
                            # Check frontend (may fail initially, that's ok)
                            echo "\\nüîç Testing frontend..."
                            curl -f http://$HOST_IP:3000 || echo "‚ö†Ô∏è Frontend not ready yet"
                            
                            # Show recent logs
                            echo "\\nüìã Backend logs:"
                            docker logs --tail=5 wanderlust-backend || true
                            
                            echo "\\nüìã Frontend logs:"
                            docker logs --tail=5 wanderlust-frontend || true
                        '''
                        
                        echo "‚úÖ Health check completed"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Health check warnings: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Cleanup Local Images') {
            steps {
                script {
                    try {
                        echo "üßπ Cleaning up local Docker images..."
                        sh '''
                            # Remove old images (keep last 3 builds)
                            docker images ${BACKEND_IMAGE} --format "table {{.Repository}}:{{.Tag}}" | grep -v latest | tail -n +4 | xargs -r docker rmi || true
                            docker images ${FRONTEND_IMAGE} --format "table {{.Repository}}:{{.Tag}}" | grep -v latest | tail -n +4 | xargs -r docker rmi || true
                            
                            # Clean up dangling images
                            docker image prune -f || true
                            
                            echo "‚úÖ Cleanup completed"
                        '''
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Cleanup warnings: ${e.getMessage()}"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "=== üìã PIPELINE SUMMARY ==="
                echo "üèóÔ∏è  Build Number: ${BUILD_NUMBER}"
                echo "üåø Branch: main"
                echo "üì¶ Image Tag: ${IMAGE_TAG}"
                
                if (env.BUILD_SUCCESS == "true") {
                    echo "üê≥ Docker Build: ‚úÖ SUCCESS"
                } else {
                    echo "üê≥ Docker Build: ‚ùå FAILED"
                }
                
                if (env.DOCKER_PUSH_SUCCESS == "true") {
                    echo "üì§ Docker Push: ‚úÖ SUCCESS"
                } else {
                    echo "üì§ Docker Push: ‚ùå FAILED"
                }
                
                if (env.DEPLOY_SUCCESS == "true") {
                    echo "üöÄ Deployment: ‚úÖ SUCCESS"
                } else if (params.SKIP_DEPLOY) {
                    echo "üöÄ Deployment: ‚è≠Ô∏è SKIPPED"
                } else {
                    echo "üöÄ Deployment: ‚ùå FAILED"
                }
                
                echo "=== üîó USEFUL LINKS ==="
                echo "üìä Jenkins Build: ${BUILD_URL}"
                echo "üê≥ Backend Image: ${BACKEND_IMAGE}:${IMAGE_TAG}"
                echo "üê≥ Frontend Image: ${FRONTEND_IMAGE}:${IMAGE_TAG}"
                echo "üåê Application URL: http://ec2-54-184-179-171.us-west-2.compute.amazonaws.com:3000"
                echo "üîß Backend API: http://ec2-54-184-179-171.us-west-2.compute.amazonaws.com:5000"
            }
        }
        
        success {
            echo "üéâ Pipeline completed successfully!"
        }
        
        failure {
            echo "üí• Pipeline failed! Check the logs above for details."
        }
        
        cleanup {
            script {
                try {
                    echo "üßπ Manual cleanup completed"
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Cleanup completed with warnings"
                }
            }
        }
    }
}
