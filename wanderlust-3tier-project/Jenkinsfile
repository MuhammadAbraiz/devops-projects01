pipeline {
    agent { label 'agent' }

    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }

    parameters {
        booleanParam(name: 'SKIP_DEPLOY', defaultValue: false, description: 'Skip deployment stage')
    }

    environment {
        IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKER_REGISTRY = "rjshk013"
        BACKEND_IMAGE = "${DOCKER_REGISTRY}/wanderlust-backend"
        FRONTEND_IMAGE = "${DOCKER_REGISTRY}/wanderlust-frontend"
        // Add environment variables for better control
        TRIVY_CACHE_DIR = "${WORKSPACE}/.trivy-cache"
        DEPLOY_SUCCESS = "false"
        DOCKER_PUSH_SUCCESS = "false"
    }

    stages {
        stage('SCM Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/devopswithjunaid/devops-projects01.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('wanderlust-3tier-project/backend') {
                    sh "npm install || true"
                }
                dir('wanderlust-3tier-project/frontend') {
                    sh "npm install || true"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    script {
                        def scannerHome = tool 'sonar-scanner'
                        dir('wanderlust-3tier-project/backend') {
                            sh """
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=wanderlust-backend \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=http://20.55.29.56:9001 \
                                -Dsonar.login=\$SONAR_AUTH_TOKEN
                            """
                        }
                    }
                }
            }
        }

        stage('Code Quality Check') {
            steps {
                echo "üìä Running code quality checks..."
                dir('wanderlust-3tier-project/backend') {
                    sh '''
                        echo "Backend package.json audit:"
                        npm audit --audit-level high || echo "Audit completed with warnings"
                    '''
                }
                dir('wanderlust-3tier-project/frontend') {
                    sh '''
                        echo "Frontend package.json audit:"
                        npm audit --audit-level high || echo "Audit completed with warnings"
                    '''
                }
            }
        }

        stage('Trivy Filesystem Scan') {
            steps {
                script {
                    sh "mkdir -p ${WORKSPACE}/trivy-reports"
                    
                    echo "üîç Scanning filesystem at ${WORKSPACE}/wanderlust-3tier-project/backend..."
                    sh """
                        docker run --rm \
                        -v ${WORKSPACE}/wanderlust-3tier-project/backend:/target \
                        -v ${WORKSPACE}/trivy-reports:/reports \
                        aquasec/trivy fs \
                        --scanners vuln \
                        --severity HIGH,CRITICAL \
                        --exit-code 0 \
                        --format table /target || true
                    """
                    
                    sh """
                        docker run --rm \
                        -v ${WORKSPACE}/wanderlust-3tier-project/backend:/target \
                        -v ${WORKSPACE}/trivy-reports:/reports \
                        aquasec/trivy fs \
                        --scanners misconfig \
                        --severity HIGH,CRITICAL \
                        --exit-code 0 \
                        --format json /target || true
                    """
                    
                    echo "üîç Scanning filesystem at ${WORKSPACE}/wanderlust-3tier-project/frontend..."
                    sh """
                        docker run --rm \
                        -v ${WORKSPACE}/wanderlust-3tier-project/frontend:/target \
                        -v ${WORKSPACE}/trivy-reports:/reports \
                        aquasec/trivy fs \
                        --scanners vuln \
                        --severity HIGH,CRITICAL \
                        --exit-code 0 \
                        --format table /target || true
                    """
                    
                    sh """
                        docker run --rm \
                        -v ${WORKSPACE}/wanderlust-3tier-project/frontend:/target \
                        -v ${WORKSPACE}/trivy-reports:/reports \
                        aquasec/trivy fs \
                        --scanners misconfig \
                        --severity HIGH,CRITICAL \
                        --exit-code 0 \
                        --format json /target || true
                    """

                    // Generate summary report
                    sh '''
                        echo "# Trivy Filesystem Scan Summary"
                        echo "## Backend Source Vulnerabilities"
                        if [ -f "${WORKSPACE}/trivy-reports/trivy-backend-fs-vuln.txt" ]; then
                            echo "```"
                            grep -A 10 "CRITICAL\\|HIGH" "${WORKSPACE}/trivy-reports/trivy-backend-fs-vuln.txt" | head -20 || echo "No critical/high vulnerabilities found"
                            echo "```"
                        fi
                    '''
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    dir('wanderlust-3tier-project') {
                        echo "üê≥ Building Docker images..."
                        sh """
                            docker build -t ${BACKEND_IMAGE}:${IMAGE_TAG} -f ./backend/Dockerfile_optimized ./backend
                            echo "‚úÖ Backend image built successfully"
                            
                            docker build -t ${FRONTEND_IMAGE}:${IMAGE_TAG} -f ./frontend/Dockerfile_optimized ./frontend
                            echo "‚úÖ Frontend image built successfully"
                            
                            # Also tag with latest for easier pulls
                            docker tag ${BACKEND_IMAGE}:${IMAGE_TAG} ${BACKEND_IMAGE}:latest
                            docker tag ${FRONTEND_IMAGE}:${IMAGE_TAG} ${FRONTEND_IMAGE}:latest
                            
                            echo "üìã Built images:"
                            docker images | grep ${DOCKER_REGISTRY}/wanderlust
                        """
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                script {
                    // Create trivy cache directory
                    sh "mkdir -p ${TRIVY_CACHE_DIR}"
                    
                    echo "üîç Scanning ${BACKEND_IMAGE}:${IMAGE_TAG}..."
                    sh """
                        docker run --rm \
                        -v /var/run/docker.sock:/var/run/docker.sock \
                        -v ${TRIVY_CACHE_DIR}:/root/.cache/ \
                        -v ${WORKSPACE}/trivy-reports:/reports \
                        aquasec/trivy image \
                        --scanners vuln \
                        --severity HIGH,CRITICAL \
                        --exit-code 0 \
                        --format table ${BACKEND_IMAGE}:${IMAGE_TAG} || true
                    """
                    
                    echo "üîç Scanning ${FRONTEND_IMAGE}:${IMAGE_TAG}..."
                    sh """
                        docker run --rm \
                        -v /var/run/docker.sock:/var/run/docker.sock \
                        -v ${TRIVY_CACHE_DIR}:/root/.cache/ \
                        -v ${WORKSPACE}/trivy-reports:/reports \
                        aquasec/trivy image \
                        --scanners vuln \
                        --severity HIGH,CRITICAL \
                        --exit-code 0 \
                        --format table ${FRONTEND_IMAGE}:${IMAGE_TAG} || true
                    """

                    sh '''
                        echo "# Trivy Container Image Scan Summary"
                        echo "## Images Scanned:"
                        echo "- ${BACKEND_IMAGE}:${IMAGE_TAG}"
                        echo "- ${FRONTEND_IMAGE}:${IMAGE_TAG}"
                    '''
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    try {
                        withCredentials([string(credentialsId: 'docker-hub-token', variable: 'DOCKER_TOKEN')]) {
                            sh '''
                                echo "üö¢ Pushing images to Docker Hub..."
                                echo "$DOCKER_TOKEN" | docker login -u "${DOCKER_REGISTRY}" --password-stdin
                                
                                echo "üì§ Pushing ${BACKEND_IMAGE}:${IMAGE_TAG}..."
                                docker push ${BACKEND_IMAGE}:${IMAGE_TAG}
                                
                                echo "üì§ Pushing ${BACKEND_IMAGE}:latest..."
                                docker push ${BACKEND_IMAGE}:latest
                                
                                echo "üì§ Pushing ${FRONTEND_IMAGE}:${IMAGE_TAG}..."  
                                docker push ${FRONTEND_IMAGE}:${IMAGE_TAG}
                                
                                echo "üì§ Pushing ${FRONTEND_IMAGE}:latest..."
                                docker push ${FRONTEND_IMAGE}:latest
                                
                                echo "‚úÖ All images pushed successfully to Docker Hub"
                            '''
                            env.DOCKER_PUSH_SUCCESS = "true"
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Docker Hub push failed or skipped - credential 'docker-hub-token' not found"
                        echo "‚ÑπÔ∏è Configure Docker Hub credential to enable automatic image pushing"
                        echo "Error: ${e.getMessage()}"
                        // Don't fail the build, but don't mark as unstable either
                        echo "üîí Images will be kept locally for manual push or deployment"
                    }
                }
            }
        }

        stage('Remote Deploy on Host with Docker Compose') {
            when {
                not { params.SKIP_DEPLOY }
            }
            steps {
                script {
                    try {
                        sshagent(credentials: ['jenkins']) {
                            sh '''
                                echo "üöÄ Deploying on host with docker compose..."
                                ssh -o StrictHostKeyChecking=no user@172.18.0.1 "
                                    cd /home/user/devops-projects/wanderlust-3tier-project &&
                                    docker compose pull &&
                                    docker compose up -d &&
                                    echo '‚úÖ Deployment completed successfully'
                                "
                            '''
                            env.DEPLOY_SUCCESS = "true"
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Deployment failed - SSH credential 'jenkins' not found or deployment target unreachable"
                        echo "‚ÑπÔ∏è Configure SSH credential and ensure target server is accessible"
                        echo "Error: ${e.getMessage()}"
                        echo "üîí Images will be kept locally for manual deployment"
                    }
                }
            }
        }

        stage('Manual Cleanup') {
            steps {
                echo "üîí Image cleanup disabled - all Docker images will be preserved locally"
                echo "üìã Built images are available:"
                sh '''
                    docker images | grep ${DOCKER_REGISTRY}/wanderlust || echo "No wanderlust images found"
                '''
            }
        }
    }

    post {
        always {
            script {
                // Archive artifacts if they exist
                if (fileExists('trivy-reports')) {
                    archiveArtifacts artifacts: 'trivy-reports/**/*', allowEmptyArchive: true
                }
                
                // NO CLEANUP - Images are preserved permanently
                echo "üîí Docker images preserved permanently - no cleanup performed"
                echo "üìã Local images available for manual use or deployment:"
                sh '''
                    echo "=== AVAILABLE DOCKER IMAGES ==="
                    docker images | grep ${DOCKER_REGISTRY}/wanderlust || echo "No wanderlust images found"
                '''
                
                if (env.DOCKER_PUSH_SUCCESS == "true") {
                    echo "‚úÖ Images are also available on Docker Hub:"
                    echo "   - ${DOCKER_REGISTRY}/wanderlust-backend:${IMAGE_TAG}"
                    echo "   - ${DOCKER_REGISTRY}/wanderlust-backend:latest"
                    echo "   - ${DOCKER_REGISTRY}/wanderlust-frontend:${IMAGE_TAG}"
                    echo "   - ${DOCKER_REGISTRY}/wanderlust-frontend:latest"
                }
                
                // Display final status
                sh '''
                    echo "=== PIPELINE SUMMARY ==="
                    echo "üì¶ Docker Images Built: ‚úÖ"
                    echo "üîç Security Scans: ‚úÖ"
                    echo "üîí Image Cleanup: Disabled (Images Preserved)"
                '''
                
                if (env.DOCKER_PUSH_SUCCESS == "true") {
                    sh 'echo "üì§ Docker Hub Push: ‚úÖ"'
                } else {
                    sh 'echo "üì§ Docker Hub Push: ‚ö†Ô∏è Skipped (Configure docker-hub-token credential)"'
                }
                
                if (env.DEPLOY_SUCCESS == "true") {
                    sh 'echo "üöÄ Deployment: ‚úÖ"'
                } else {
                    sh 'echo "üöÄ Deployment: ‚ö†Ô∏è Skipped (Configure jenkins SSH credential)"'
                }
            }
        }
        
        success {
            script {
                def deployStatus = env.DEPLOY_SUCCESS == "true" ? "üöÄ Deployment: ‚úÖ" : "üöÄ Deployment: ‚ö†Ô∏è Skipped"
                def pushStatus = env.DOCKER_PUSH_SUCCESS == "true" ? "üì§ Push: ‚úÖ" : "üì§ Push: ‚ö†Ô∏è Skipped"
                
                // Send success notification
                try {
                    withCredentials([string(credentialsId: 'slack-webhook', variable: 'WEBHOOK')]) {
                        sh """
                            curl -X POST -H "Content-type: application/json" \
                            --data '{"text": "‚úÖ BUILD SUCCESS: MyApp-CI-CD #${BUILD_NUMBER}\\nüîó Build URL: ${BUILD_URL}\\nüì¶ Images: ${BACKEND_IMAGE}:${IMAGE_TAG}, ${FRONTEND_IMAGE}:${IMAGE_TAG}\\n${pushStatus}\\n${deployStatus}"}' \
                            "${WEBHOOK}"
                        """
                    }
                } catch (Exception e) {
                    echo "Notification webhook not configured"
                }
            }
        }
        
        failure {
            script {
                // Send failure notification
                try {
                    withCredentials([string(credentialsId: 'slack-webhook', variable: 'WEBHOOK')]) {
                        sh '''
                            curl -X POST -H "Content-type: application/json" \
                            --data '{"text": "‚ùå BUILD FAILED: MyApp-CI-CD #${BUILD_NUMBER}\\nüîó Build URL: ${BUILD_URL}\\nüí• Pipeline failed - check logs for details"}' \
                            "${WEBHOOK}"
                        '''
                    }
                } catch (Exception e) {
                    echo "Notification webhook not configured"
                }
            }
        }
    }
}
