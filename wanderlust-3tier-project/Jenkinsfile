pipeline {
    agent { label 'agent' }

    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }

    environment {
        IMAGE_TAG = "${BUILD_NUMBER}"
        BACKEND_IMAGE = "devopswithjunaid/wanderlust-backend"
        FRONTEND_IMAGE = "devopswithjunaid/wanderlust-frontend"
    }

    stages {
        stage('SCM Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/devopswithjunaid/devops-projects01.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('wanderlust-3tier-project/backend') {
                    sh "npm install || true"
                }
                dir('wanderlust-3tier-project/frontend') {
                    sh "npm install"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    script {
                        def scannerHome = tool 'sonar-scanner'
                        dir('wanderlust-3tier-project/backend') {
                            sh """
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=wanderlust-backend \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=http://20.55.29.56:9001 \
                                -Dsonar.login=\$SONAR_AUTH_TOKEN
                            """
                        }
                    }
                }
            }
        }

        stage('Code Quality Check') {
            steps {
                echo "Running code quality checks..."
                dir('wanderlust-3tier-project/backend') {
                    sh '''
                        echo "Backend package.json audit:"
                        npm audit --audit-level high || true
                        echo "Audit completed with warnings"
                    '''
                }
                dir('wanderlust-3tier-project/frontend') {
                    sh '''
                        echo "Frontend package.json audit:"
                        npm audit --audit-level high || true
                        echo "Audit completed with warnings"
                    '''
                }
            }
        }

        stage('Trivy Filesystem Scan') {
            steps {
                script {
                    sh "mkdir -p ${WORKSPACE}/trivy-reports"
                    
                    echo "Scanning filesystem..."
                    sh """
                        docker run --rm \
                        -v ${WORKSPACE}/wanderlust-3tier-project/backend:/target \
                        -v ${WORKSPACE}/trivy-reports:/reports \
                        aquasec/trivy fs \
                        --scanners vuln \
                        --severity HIGH,CRITICAL \
                        --exit-code 0 \
                        --format table /target || true
                    """
                    
                    sh """
                        docker run --rm \
                        -v ${WORKSPACE}/wanderlust-3tier-project/frontend:/target \
                        -v ${WORKSPACE}/trivy-reports:/reports \
                        aquasec/trivy fs \
                        --scanners vuln \
                        --severity HIGH,CRITICAL \
                        --exit-code 0 \
                        --format table /target || true
                    """
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    dir('wanderlust-3tier-project') {
                        echo "Building Docker images with correct namespace: devopswithjunaid"
                        sh """
                            docker build -t ${BACKEND_IMAGE}:${IMAGE_TAG} -f ./backend/Dockerfile_optimized ./backend
                            docker build -t ${FRONTEND_IMAGE}:${IMAGE_TAG} -f ./frontend/Dockerfile_optimized ./frontend
                            echo "Images built successfully:"
                            docker images | grep devopswithjunaid/wanderlust
                        """
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                script {
                    echo "Scanning ${BACKEND_IMAGE}:${IMAGE_TAG}..."
                    sh """
                        docker run --rm \
                        -v /var/run/docker.sock:/var/run/docker.sock \
                        aquasec/trivy image \
                        --scanners vuln \
                        --severity HIGH,CRITICAL \
                        --exit-code 0 \
                        --format table ${BACKEND_IMAGE}:${IMAGE_TAG} || true
                    """
                    
                    echo "Scanning ${FRONTEND_IMAGE}:${IMAGE_TAG}..."
                    sh """
                        docker run --rm \
                        -v /var/run/docker.sock:/var/run/docker.sock \
                        aquasec/trivy image \
                        --scanners vuln \
                        --severity HIGH,CRITICAL \
                        --exit-code 0 \
                        --format table ${FRONTEND_IMAGE}:${IMAGE_TAG} || true
                    """
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-creds1', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                        echo "Logging into Docker Hub as \${DOCKER_USER}..."
                        echo "\$DOCKER_PASS" | docker login -u "\$DOCKER_USER" --password-stdin
                        
                        echo "Pushing ${BACKEND_IMAGE}:${IMAGE_TAG}..."
                        docker push ${BACKEND_IMAGE}:${IMAGE_TAG}
                        
                        echo "Pushing ${FRONTEND_IMAGE}:${IMAGE_TAG}..."
                        docker push ${FRONTEND_IMAGE}:${IMAGE_TAG}
                        
                        echo "Images pushed successfully to Docker Hub"
                    """
                }
            }
        }

        stage('Remote Deploy') {
            steps {
                sshagent(credentials: ['deploy-server-ssh1']) {
                    sh """
                        echo "Deploying to remote server..."
                        ssh -o StrictHostKeyChecking=no azureuser@20.55.29.56 '
                            export BUILD_NUMBER=${BUILD_NUMBER} &&
                            echo "BUILD_NUMBER set to: \$BUILD_NUMBER" &&
                            cd /home/azureuser/devops-projects/wanderlust-3tier-project &&
                            echo "Pulling latest images..." &&
                            docker compose pull &&
                            echo "Starting containers..." &&
                            docker compose up -d &&
                            echo "Checking running containers..." &&
                            docker ps | grep wanderlust &&
                            echo "Deployment completed successfully"
                        '
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                if (fileExists('trivy-reports')) {
                    archiveArtifacts artifacts: 'trivy-reports/**/*', allowEmptyArchive: true
                }
                
                // DO NOT REMOVE IMAGES - Only clean build cache
                sh '''
                    echo "Cleaning build cache only (keeping images for deployment)..."
                    docker system prune -f --volumes || true
                    docker builder prune -f || true
                    echo "Images preserved for deployment"
                '''
            }
        }
        
        success {
            echo "Pipeline completed successfully!"
        }
        
        failure {
            echo "Pipeline failed!"
        }
        
        unstable {
            echo "Pipeline unstable - deployment may still work"
        }
    }
}
