pipeline {
    agent { label 'agent' }

    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }

    environment {
        IMAGE_TAG = "${BUILD_NUMBER}"
        BACKEND_IMAGE = "rjshk013/wanderlust-backend"
        FRONTEND_IMAGE = "rjshk013/wanderlust-frontend"
    }

    stages {
        stage('SCM Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/devopswithjunaid/devops-projects01.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('wanderlust-3tier-project/backend') {
                    sh "npm install || true"
                }
                dir('wanderlust-3tier-project/frontend') {
                    sh "npm install"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    script {
                        def scannerHome = tool 'sonar-scanner'
                        dir('wanderlust-3tier-project/backend') {
                            sh """
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=wanderlust-backend \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=$SONAR_HOST_URL \
                                -Dsonar.login=$SONAR_AUTH_TOKEN
                            """
                        }
                    }
                }
            }
        }

        stage('Code Quality Check') {
            steps {
                echo "üìä Running code quality checks..."
                dir('wanderlust-3tier-project/backend') {
                    sh """
                        echo "Backend package.json audit:"
                        npm audit --audit-level high || echo "Audit completed with warnings"
                    """
                }
                dir('wanderlust-3tier-project/frontend') {
                    sh """
                        echo "Frontend package.json audit:"
                        npm audit --audit-level high || echo "Audit completed with warnings"
                    """
                }
            }
        }

        stage('Trivy Filesystem Scan') {
            steps {
                script {
                    try {
                        def trivyDir = "${WORKSPACE}/trivy-reports"
                        sh "mkdir -p ${trivyDir}"
                        
                        def fsTargets = [
                            [path: "${WORKSPACE}/wanderlust-3tier-project/backend", name: "backend-fs"],
                            [path: "${WORKSPACE}/wanderlust-3tier-project/frontend", name: "frontend-fs"]
                        ]
                        
                        for (target in fsTargets) {
                            echo "üîç Scanning filesystem at ${target.path}..."
                            
                            sh """
                                docker run --rm \
                                    -v ${target.path}:/target \
                                    -v ${trivyDir}:/reports \
                                    aquasec/trivy fs \
                                    --scanners vuln \
                                    --severity HIGH,CRITICAL \
                                    --exit-code 0 \
                                    --format table \
                                    /target > ${trivyDir}/trivy-${target.name}-vuln.txt || echo "Scan completed"
                            """
                            
                            sh """
                                docker run --rm \
                                    -v ${target.path}:/target \
                                    -v ${trivyDir}:/reports \
                                    aquasec/trivy fs \
                                    --scanners misconfig \
                                    --severity HIGH,CRITICAL \
                                    --exit-code 0 \
                                    --format json \
                                    /target > ${trivyDir}/trivy-${target.name}-config.json || echo "Config scan completed"
                            """
                        }
                        
                        sh """
                            echo "# Trivy Filesystem Scan Summary" > ${trivyDir}/fs-summary.md
                            echo "## Backend Source Vulnerabilities" >> ${trivyDir}/fs-summary.md
                            if [ -f ${trivyDir}/trivy-backend-fs-vuln.txt ]; then
                                echo '```' >> ${trivyDir}/fs-summary.md
                                grep -A 10 "CRITICAL\\|HIGH" ${trivyDir}/trivy-backend-fs-vuln.txt | head -20 >> ${trivyDir}/fs-summary.md || echo "No critical/high vulnerabilities found" >> ${trivyDir}/fs-summary.md
                                echo '```' >> ${trivyDir}/fs-summary.md
                            fi
                        """
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Trivy filesystem scan encountered issues: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    dir('wanderlust-3tier-project') {
                        try {
                            echo "üê≥ Building Docker images..."
                            
                            sh """
                                docker build -t ${BACKEND_IMAGE}:${IMAGE_TAG} -f ./backend/Dockerfile_optimized ./backend
                                echo "‚úÖ Backend image built successfully"
                            """
                            
                            sh """
                                docker build -t ${FRONTEND_IMAGE}:${IMAGE_TAG} -f ./frontend/Dockerfile_optimized ./frontend
                                echo "‚úÖ Frontend image built successfully"
                            """
                            
                            sh "docker images | grep wanderlust"
                        } catch (Exception e) {
                            error "‚ùå Docker build failed: ${e.getMessage()}"
                        }
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                script {
                    try {
                        def trivyDir = "${WORKSPACE}/trivy-reports"
                        
                        def images = [
                            [name: "${BACKEND_IMAGE}:${IMAGE_TAG}", type: "backend"],
                            [name: "${FRONTEND_IMAGE}:${IMAGE_TAG}", type: "frontend"]
                        ]

                        for (img in images) {
                            echo "üîç Scanning ${img.name}..."
                            
                            sh """
                                docker run --rm \
                                    -v /var/run/docker.sock:/var/run/docker.sock \
                                    -v \$HOME/.trivy-cache:/root/.cache/ \
                                    -v ${trivyDir}:/reports \
                                    aquasec/trivy image \
                                    --scanners vuln \
                                    --severity HIGH,CRITICAL \
                                    --exit-code 0 \
                                    --format table \
                                    ${img.name} > ${trivyDir}/trivy-${img.type}-report.txt || echo "Image scan completed"
                            """
                        }
                        
                        sh """
                            echo "# Trivy Container Image Scan Summary" >> ${trivyDir}/image-summary.md
                            echo "## Images Scanned:" >> ${trivyDir}/image-summary.md
                            echo "- ${BACKEND_IMAGE}:${IMAGE_TAG}" >> ${trivyDir}/image-summary.md
                            echo "- ${FRONTEND_IMAGE}:${IMAGE_TAG}" >> ${trivyDir}/image-summary.md
                        """
                        
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Trivy image scan encountered issues: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            echo "üö¢ Pushing images to Docker Hub..."
                            echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin
                            docker push ${BACKEND_IMAGE}:${IMAGE_TAG}
                            docker push ${FRONTEND_IMAGE}:${IMAGE_TAG}
                            echo "‚úÖ Images pushed successfully"
                        '''
                    }
                }
            }
        }

        stage('Remote Deploy on Host with Docker Compose') {
            steps {
                script {
                    try {
                        sshagent(credentials: ['deploy-server-ssh']) {
                            sh '''
                                echo "üöÄ Deploying on host with docker compose..."
                                ssh -o StrictHostKeyChecking=no user@172.18.0.1 "
                                    cd /home/user/devops-projects/wanderlust-3tier-project &&
                                    docker compose pull &&
                                    docker compose up -d &&
                                    echo '‚úÖ Deployment completed successfully'
                                "
                            '''
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Deployment skipped - SSH credential 'deploy-server-ssh' not found or deployment target unreachable"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                if (fileExists('trivy-reports/')) {
                    archiveArtifacts artifacts: 'trivy-reports/**', fingerprint: true, allowEmptyArchive: true
                }
                sh '''
                    echo "üßπ Cleaning up Docker images..."
                    docker rmi ${BACKEND_IMAGE}:${IMAGE_TAG} || true
                    docker rmi ${FRONTEND_IMAGE}:${IMAGE_TAG} || true
                    docker system prune -f || true
                '''
            }
        }

        success {
            script {
                withCredentials([string(credentialsId: 'SLACK_WEBHOOK_URL', variable: 'WEBHOOK')]) {
                    sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚úÖ BUILD SUCCESSFUL: ${env.JOB_NAME} #${env.BUILD_NUMBER}\\nüîó Build URL: ${env.BUILD_URL}\\nüì¶ Images: ${env.BACKEND_IMAGE}:${env.IMAGE_TAG}, ${env.FRONTEND_IMAGE}:${env.IMAGE_TAG}\\nüöÄ CI/CD pipeline completed!"}' \
                    \$WEBHOOK
                    """
                }
            }
        }

        failure {
            script {
                withCredentials([string(credentialsId: 'SLACK_WEBHOOK_URL', variable: 'WEBHOOK')]) {
                    sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚ùå BUILD FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}\\nüîó Build URL: ${env.BUILD_URL}\\nüìã Check logs for details\\n‚ö†Ô∏è Pipeline failed at one of the stages"}' \
                    \$WEBHOOK
                    """
                }
            }
        }

        unstable {
            script {
                withCredentials([string(credentialsId: 'SLACK_WEBHOOK_URL', variable: 'WEBHOOK')]) {
                    sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚ö†Ô∏è BUILD UNSTABLE: ${env.JOB_NAME} #${env.BUILD_NUMBER}\\nüîó Build URL: ${env.BUILD_URL}\\nüìã Core functionality works, optional features need configuration\\n‚úÖ Docker images built and scanned successfully"}' \
                    \$WEBHOOK
                    """
                }
            }
        }
    }
}
